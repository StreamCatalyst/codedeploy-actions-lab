AWSTemplateFormatVersion: 2010-09-09
Description: >
  CloudFormation for provisioning services required to setup the CI/CD using GitHub Actions and CodeDeploy.
  **WARNING** This template creates EC2, VPC and related resources. You will be billed for the AWS resources used.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: "VPC Configurations" }
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      - Label: { default: "Autoscaling configurations" }
        Parameters:
          - ImageId
          - InstanceType
          - AutoScalingGroupMinSize
          - AutoScalingGroupMaxSize
          - AutoScalingGroupDesiredCapacity
      - Label: { default: "GitHub configurations" }
        Parameters:
          - GithubRepoName
          - ThumbprintList

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.192.0.0/16
    Description: IP range (CIDR) for the VPC

  PublicSubnet1CIDR:
    Type: String
    Default: 10.192.10.0/24
    Description: CIDR for the public subnet in AZ1

  PublicSubnet2CIDR:
    Type: String
    Default: 10.192.11.0/24
    Description: CIDR for the public subnet in AZ2

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.192.20.0/24
    Description: CIDR for the private subnet in AZ1

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.192.21.0/24
    Description: CIDR for the private subnet in AZ2

  ImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: AMI for EC2 instances

  InstanceType:
    Type: String
    Default: t2.medium
    Description: EC2 instance type

  AutoScalingGroupMinSize:
    Type: Number
    Default: 2
    Description: Min size for the ASG

  AutoScalingGroupMaxSize:
    Type: Number
    Default: 2
    Description: Max size for the ASG

  AutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired capacity for the ASG

  ThumbprintList:
    Type: String
    Default: 6938fd4d98bab03faadb97b34396831e3780aea1
    Description: SHA1 thumbprint for GitHub OIDC provider

  GithubRepoName:
    Type: String
    Description: 'GitHub repository name, e.g., yourUser/yourRepo'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: Public Subnet (AZ1) }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: Public Subnet (AZ2) }]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: Private Subnet (AZ1) }]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: Private Subnet (AZ2) }]

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow access to ALB from internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 8080, ToPort: 8080, CidrIp: 0.0.0.0/0 }
      SecurityGroupEgress:
        - { IpProtocol: '-1', CidrIp: 0.0.0.0/0 }

  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow access to Webapp from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - { IpProtocol: '-1', CidrIp: 0.0.0.0/0 }

  WebappDeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: { SSEAlgorithm: AES256 }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebappRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com", "codedeploy.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Policies:
        - PolicyName: "allow-webapp-deployment-bucket-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ["s3:GetObject"]   # fixed casing
                Resource: !Sub arn:${AWS::Partition}:s3:::${WebappDeploymentBucket}/*

  WebappInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref WebappRole]

  IDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: "https://token.actions.githubusercontent.com"
      ClientIdList: ["sts.amazonaws.com"]
      ThumbprintList: [!Ref ThumbprintList]

  GitHubIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !Ref IDCProvider
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GithubRepoName}:*
      MaxSessionDuration: 3600
      Description: "Github Actions role"
      Policies:
        - PolicyName: 'CodeDeployRoleforGitHub-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:Get*'
                  - 'codedeploy:Batch*'
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:RegisterApplicationRevision'
                  - 'codedeploy:List*'
                Resource: !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'        # fixed casing
                Resource: !Sub arn:${AWS::Partition}:s3:::${WebappDeploymentBucket}/*

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: { Service: ["codedeploy.amazonaws.com"] }
            Action: ["sts:AssumeRole"]
      Path: "/"
      # Managed policy is sufficient for this lab; removed bad inline policy resources
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  WebappLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        SecurityGroupIds: [!Ref WebappSecurityGroup]
        IamInstanceProfile:
          Arn: !GetAtt WebappInstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install -y java-1.8.0-openjdk-devel wget unzip gpg
            java -version
            cd /usr/local
            wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip
            wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip.asc
            wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip.sha512
            sha512sum apache-tomcat-9.0.43.zip
            cat apache-tomcat-9.0.43.zip.sha512
            gpg --keyserver keyserver.ubuntu.com --recv-key A9C5DF4D22E99998D9875A5110C01C5A2F6059E7
            gpg --verify apache-tomcat-9.0.43.zip.asc apache-tomcat-9.0.43.zip || true
            unzip apache-tomcat-9.0.43.zip
            mv apache-tomcat-9.0.43 tomcat9
            echo 'JAVA_OPTS="$JAVA_OPTS -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true"' > /usr/local/tomcat9/bin/setenv.sh
            useradd -r tomcat || true
            chown -R tomcat:tomcat /usr/local/tomcat9
            cat >/etc/systemd/system/tomcat.service <<'EOF'
            [Unit]
            Description=Apache Tomcat Server
            After=syslog.target network.target
            [Service]
            Type=forking
            User=tomcat
            Group=tomcat
            Environment=CATALINA_PID=/usr/local/tomcat9/temp/tomcat.pid
            Environment=CATALINA_HOME=/usr/local/tomcat9
            Environment=CATALINA_BASE=/usr/local/tomcat9
            ExecStart=/usr/local/tomcat9/bin/catalina.sh start
            ExecStop=/usr/local/tomcat9/bin/catalina.sh stop
            RestartSec=10
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            chmod +x /usr/local/tomcat9/bin/catalina.sh
            systemctl daemon-reload
            systemctl enable --now tomcat.service
            yum install -y ruby
            cd /root
            wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable --now amazon-ssm-agent

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGateway
    Properties:
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref ALBSecurityGroup]

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      LaunchTemplate:
        LaunchTemplateId: !Ref WebappLaunchTemplate
        Version: !GetAtt WebappLaunchTemplate.LatestVersionNumber
      MinSize: !Ref AutoScalingGroupMinSize
      MaxSize: !Ref AutoScalingGroupMaxSize
      DesiredCapacity: !Ref AutoScalingGroupDesiredCapacity
      TargetGroupARNs: [!Ref ALBTargetGroup]
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: webapp-example
          PropagateAtLaunch: true

  WebappApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: CodeDeployAppNameWithASG

  WebappDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref WebappApplication
      DeploymentGroupName: CodeDeployGroupName
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      AutoScalingGroups: [!Ref AutoScalingGroup]
      AutoRollbackConfiguration:
        Enabled: true
        Events: [DEPLOYMENT_FAILURE, DEPLOYMENT_STOP_ON_REQUEST]

Outputs:
  WebappUrl:
    Description: Webapp URL
    Value:
      Fn::Join:
        - ''
        - - 'http://'
          - !GetAtt ApplicationLoadBalancer.DNSName
          - ':8080/SpringBootHelloWorldExampleApplication'
  DeploymentGroup:
    Description: Webapp Deployment Group
    Value: !Ref WebappDeploymentGroup
  DeploymentBucket:
    Description: Deployment bucket
    Value: !Ref WebappDeploymentBucket
  ApplicationName:
    Description: CodeDeploy Application name
    Value: !Ref WebappApplication
  GithubIAMRoleArn:
    Description: IAM role for GitHub
    Value: !GetAtt GitHubIAMRole.Arn
